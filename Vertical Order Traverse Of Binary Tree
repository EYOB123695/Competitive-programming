# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def verticalTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        result=[]
       
        if root== None :
            return result
        cache={}
        self.minc,self.maxc=0,0
        def dfs(node,r,c):
            if node==None:
                return
            
            
            if c in cache:
                cache[c].append([r,node.val])
            else:
                cache[c]=[[r,node.val]]
            self.minc = min(self.minc,c)
            self.maxc=max(self.maxc,c)
            dfs(node.left,r+1,c-1) 
            dfs(node.right,r+1,c+1)
        dfs(root,0,0)
        for c in range(self.minc,self.maxc+1):
            col=sorted(cache[c],key=lambda x:(x[0],x[1]))
            col_sorted=[] 
            for p in col_sorted:
                col_sorted.append(p[1])
            result.append(col_sorted)
        return result
        
            
            

